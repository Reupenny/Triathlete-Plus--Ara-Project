@startuml
class CyclingSession {
    -distance : number
    -duration : number
    -terrain : string
    -bikeUsed : string
    -airTempiture : number
    -weatherCondition : string
    +getDetails() : string
}

class History {
    -history : array
    -maxSize : number
    +addHistory(trainingSession)
    +getHistory() : array
    +saveHistory()
    +loadHistory()
}

class Member {
    +allMembers : static
    +lastMemberID : static
    -#memberID : string
    -userName : string
    -fName : string
    -lName : string
    +get memberID() : string
    +createMember(userName, fName, lName) : static
    +deleteMember(userName) : static
    +generateMemberID() : static
    +login(userName) : static
    +logout() : static
}

class RunningSession {
    -distance : number
    -duration : number
    -shoesUsed : string
    -airTempiture : number
    -weatherCondition : string
    +getDetails() : string
}

class SwimmingSession {
    -lapLength : number
    -strokeType : string
    -laps : number
    -lapTimes : array
    -waterTempiture : number
    +getDetails() : string
    +getTotalDistance() : number
    +getTotalDuration() : number
}

enum SportType {
    SWIMMING
    RUNNING
    CYCLING
}

class TrainingSession {
    +lastSessionID : static
    -#sessionID : string
    -memberID : string
    -date : string
    -notes : string
    -sportType : SportType
    +get sessionID() : string
    +generateSessionID() : static
    +getDetails() : string
}

class TriathlonData {
    +trainingSessions : static
    -history : History
    +CreateSwimmingSession(date, notes, lapLength, strokeType, lapTimes, waterTempiture)
    +CreateCyclingSession(date, notes, distance, duration, terain, bikeUsed, airTempiture, weatherCondition)
    +CreateRunningSession(date, notes, distance, duration, shoesUsed, airTempiture, weatherCondition)
    +findTrainingSessionByID(sessionID)
    +deleteTrainingSession(sessionID)
    +editTrainingSession(sessionID, updatedSession)
    +sortTrainingSessionsByDate(trainingSessions)
    +sortTrainingSessionsByMemberID(trainingSessions)
    +sortTrainingSessionsBySportType(trainingSessions)
    +sortTrainingSessionsByDistance(trainingSessions)
    +calculateTotalDistanceForDatePeriod(trainingSessions, startDate, endDate)
    +calculateAveragePace(trainingSessions)
    +searchTrainingSessions(searchType, searchQuery)
}

TriathlonData "1" -- "1" History : has >
TriathlonData "1" *-- TrainingSession : manages >
TriathlonData "1" *-- SwimmingSession : creates >
TriathlonData "1" *-- CyclingSession : creates >
TriathlonData "1" *-- RunningSession : creates >
CyclingSession --|> TrainingSession : extends
RunningSession --|> TrainingSession : extends
SwimmingSession --|> TrainingSession : extends
TrainingSession -- SportType : uses >
TrainingSession -- Member : uses >
@enduml
